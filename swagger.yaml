swagger: "2.0"
info:
  title: Next OMS API
  description: The purpose of this service is to handle order management and facilitate user authentication and authorization.
  version: v1.0.0
  contact:
    name: Rezwanul-Haque
    email: rezwanul.cse@gmail.com
host: localhost:8080
basePath: /api
schemes:
  - http
produces:
  - application/json
consumes:
  - application/json
securityDefinitions:
  BearerAuth:
    type: apiKey
    name: Authorization
    in: header
    description: "Provide the Bearer token with the 'Bearer <token>' format."
paths:
  /v1/orders:
    post:
      tags:
        - Orders
      summary: Create Order
      description: Create a new order.
      operationId: createOrder
      parameters:
        - in: body
          name: Body
          required: true
          schema:
            $ref: '#/definitions/DeliveryOrder'
      responses:
        "201":
          description: Order created successfully.
          content:
            application/json:
              schema:
                type: object
        "400":
          $ref: '#/responses/errorResponse'
      security:
        - BearerAuth: []
  /v1/orders/{orderId}/cancel:
    put:
      tags:
        - Orders
      summary: Cancel Order
      description: Cancel an existing order.
      operationId: cancelOrder
      parameters:
        - name: orderId
          in: path
          required: true
          type: string
          description: The ID of the order to cancel.
      responses:
        "200":
          description: Order canceled successfully.
          content:
            application/json:
              schema:
                type: object
        "400":
          $ref: '#/responses/errorResponse'
      security:
        - BearerAuth: []
  /v1/orders/all:
    get:
      tags:
        - Orders
      summary: Get Orders
      description: Retrieve all orders.
      operationId: getOrders
      responses:
        "200":
          description: Orders retrieved successfully.
          content:
            application/json:
              schema:
                type: object
        "400":
          $ref: '#/responses/errorResponse'
      security:
        - BearerAuth: []
  /v1/login:
    post:
      tags:
        - Authentication
      summary: Login
      description: Login a user.
      operationId: login
      parameters:
        - in: body
          name: Body
          required: true
          schema:
            type: object
            example: { "username": "01901901901@mailinator.com", "password": "321dsa" }
      responses:
        "200":
          description: Login successful.
          content:
            application/json:
              schema:
                type: object
        "401":
          description: Unauthorized
  /v1/users/signup:
    post:
      tags:
        - Users
      summary: User Signup
      description: Register a new user.
      operationId: userSignup
      parameters:
        - in: body
          name: Body
          required: true
          schema:
            $ref: '#/definitions/UserReq'
      responses:
        "201":
          $ref: '#/responses/UserCreatedResponse'
        "400":
          $ref: '#/responses/errorResponse'
  /v1/logout:
    post:
      tags:
        - Authentication
      summary: Logout
      description: Logout a user.
      operationId: logout
      parameters:
        - in: header
          name: Authorization
          required: true
          type: string
          description: Bearer token for the authenticated user.
      responses:
        "200":
          description: Logout successful.
          content:
            application/json:
              schema:
                type: object
        "401":
          description: Unauthorized
definitions:
  RestErr:
    type: object
    properties:
      error:
        type: string
        example: bad_request
      message:
        type: string
        example: error message
      status:
        type: integer
        format: int64
        example: 400
  UserReq:
    type: object
    properties:
      email:
        type: string
        example: 01901901901@mailinator.com
      first_name:
        type: string
        example: Hello
      last_name:
        type: string
        example: World
      password:
        type: string
        example: 321dsa
      phone:
        type: string
        example: 01901901901
      profile_pic:
        type: string
        example: https://dummyimage.com/300x300/
      user_name:
        type: string
        example: Hello-World
  UserResp:
    type: object
    properties:
      email:
        type: string
      first_login:
        type: boolean
      first_name:
        type: string
      id:
        type: integer
        format: int64
      last_login_at:
        type: string
        format: date-time
      last_name:
        type: string
      phone:
        type: string
      profile_pic:
        type: string
      user_name:
        type: string
  DeliveryOrder:
    type: object
    properties:
      store_id:
        type: integer
        format: int64
        description: The ID of the store placing the order.
      merchant_order_id:
        type: string
        description: The unique order ID assigned by the merchant.
      recipient_name:
        type: string
        description: The name of the recipient.
      recipient_phone:
        type: string
        description: The phone number of the recipient.
      recipient_address:
        type: string
        description: The address of the recipient.
      recipient_city:
        type: integer
        format: int32
        description: The ID representing the recipient's city.
      recipient_zone:
        type: integer
        format: int32
        description: The ID representing the recipient's zone.
      recipient_area:
        type: integer
        format: int32
        description: The ID representing the recipient's area.
      delivery_type:
        type: integer
        format: int32
        description: The type of delivery service (e.g., standard, express).
      item_type:
        type: integer
        format: int32
        description: The type of item being delivered.
      special_instruction:
        type: string
        description: Any special instructions for the delivery.
      item_quantity:
        type: integer
        format: int32
        description: The quantity of items in the order.
      item_weight:
        type: number
        format: float
        description: The weight of the item in kilograms.
      amount_to_collect:
        type: number
        format: float
        description: The amount to be collected upon delivery.
      item_description:
        type: string
        description: A description of the item being delivered.
    required:
      - store_id
      - merchant_order_id
      - recipient_name
      - recipient_phone
      - recipient_address
      - recipient_city
      - recipient_zone
      - recipient_area
      - delivery_type
      - item_type
      - item_quantity
      - item_weight
      - amount_to_collect
    example:
      store_id: 131172
      merchant_order_id: "1"
      recipient_name: "Jhon Doe Jr."
      recipient_phone: "01901901901"
      recipient_address: "banani, gulshan 2, dhaka, bangladesh"
      recipient_city: 1
      recipient_zone: 1
      recipient_area: 1
      delivery_type: 48
      item_type: 2
      special_instruction: "N/A"
      item_quantity: 1
      item_weight: 0.5
      amount_to_collect: 20.0
      item_description: "Dummy Item"
responses:
  UserCreatedResponse:
    description: Response after a user is created
    schema:
      $ref: '#/definitions/UserResp'
  errorResponse:
    description: Generic error response
    schema:
      $ref: '#/definitions/RestErr'
